# nginx.conf

worker_processes auto;  # Use the number of CPU cores

events {
    worker_connections 10240;  # Maximum connections per worker process
    multi_accept on;  # Accept multiple connections simultaneously
}

http {
    # Cache configuration to improve performance
    proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=60m use_temp_path=off;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Enable Gzip compression to reduce response sizes
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Define rate limiting to prevent abuse
    limit_req_zone $binary_remote_addr zone=rate_limit:10m rate=10r/s;

    # Define upstream to balance between multiple backend instances
    upstream app_servers {
        least_conn;  # Distribute requests based on the least active connections
        server task_service:8000;  # Docker's internal DNS will handle replicas
    }

    server {
        listen 443 ssl;
        http2 on;
        server_name yourdomain.com;

        # SSL certificates (update with actual paths to your certs)
        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;

        # SSL settings to ensure security
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;
        ssl_ciphers HIGH:!aNULL:!MD5;

        # Security headers
        add_header X-Frame-Options SAMEORIGIN;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";

        # Enable caching for better performance
        proxy_cache my_cache;
        proxy_cache_valid 200 10m;
        proxy_cache_valid 404 1m;

        # Main location to forward requests to backend replicas
        location / {
            proxy_pass http://app_servers;
            proxy_http_version 1.1;

            # WebSocket support
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Preserve client information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeout settings to handle slow requests
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;

            # Rate limiting to protect from abuse
            limit_req zone=rate_limit burst=20 nodelay;
        }

        # Custom error handling
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Redirect HTTP traffic to HTTPS
    server {
        listen 80;
        server_name yourdomain.com;
        return 301 https://$host$request_uri;
    }
}
